package poet.lion.babygoodsticker;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;

import android.app.Activity;
import android.app.AlertDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.Bitmap.Config;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.media.MediaPlayer;
import android.media.MediaScannerConnection;
import android.net.Uri;
import android.os.Bundle;
import android.os.Environment;
import android.provider.MediaStore;
import android.provider.MediaStore.Images;
import android.text.format.Time;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.animation.Animation;
import android.view.animation.AnimationSet;
import android.view.animation.LinearInterpolator;
import android.view.animation.RotateAnimation;
import android.view.animation.ScaleAnimation;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.GridView;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.SimpleAdapter;
import android.widget.Toast;

import com.google.android.gms.ads.AdRequest;
import com.google.android.gms.ads.AdView;

public class MainActivity extends Activity {
	private GridView gridView;
	private static int[] image = new int[20] ;
	private static int total = 0;
	private LinearLayout linearLayout;
    private Bitmap myBitmap;
    private ImageButton image_above;
    String picturePath = null;
    private AdView adView;
    private ImageView imgRight;
    private SimpleAdapter adapter;
    private MediaPlayer mp ;
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
		SharedPreferences settings = getSharedPreferences("PREFdown", 0);

		adView = (AdView)findViewById(R.id.adView);
	    AdRequest adRequest = new AdRequest.Builder().build();  //正式使用
//		final TelephonyManager tm =(TelephonyManager)getBaseContext().getSystemService(Context.TELEPHONY_SERVICE);
//		String deviceid = tm.getDeviceId();
//	    AdRequest adRequest = new AdRequest.Builder()
//	    .addTestDevice(AdRequest.DEVICE_ID_EMULATOR)       // 仿真器
//	    .addTestDevice(deviceid) //  測試手機
//	    .build();
	    
	    adView.loadAd(adRequest);
		image_above = (ImageButton)findViewById(R.id.image_above);
		imgRight = (ImageView)findViewById(R.id.imageView1);
		total = 0;
		SharedPreferences settt = getSharedPreferences("dino", 0);
		String picturePath = settt.getString("thumb","");
		
		 if (! "".equals(picturePath) ){
		 image_above.setImageBitmap(decodefile(picturePath));
		 
		 }else{
		image_above.setImageDrawable(getResources().getDrawable(R.drawable.def)); 
		 };
			 
		 	
		
		for (int i = 0; i < 20; i++) {
			 try {
				 
				 String image_oncreated = settings.getString(String.valueOf(i), "");
				 image[i] = Integer.parseInt(image_oncreated);
				 
				 
			 } catch (Exception e) {image[i] = R.drawable.white;};
			 
			 if (image[i] == R.drawable.def){
				 total= total +1;
				 if  (total < 10){
		        	   imgRight.setImageResource(R.drawable.floor1);
		           }	           
		           else if (total > 9 && total < 20) { 
		            	imgRight.setImageResource(R.drawable.floor2);
		                }
		            else if (total == 20){
		            	imgRight.setImageResource(R.drawable.floor3);}	 
			 
			 
			 
			 
			 
			 
			 }
		}
		
		List<Map<String, Object>> items = new ArrayList<Map<String,Object>>();
//	    for (int i = 0; i < image.length; i++) {
		for (int i = 0; i < 20; i++) {
	         Map<String, Object> item = new HashMap<String, Object>();
	         item.put("image", image[i]);
	         items.add(item);
	    }
		adapter = new SimpleAdapter(this, 
	        items, R.layout.grid_item, new String[]{"image"},
	        new int[]{R.id.image});

		
	    
        
    	Thread thread = new Thread(Runnable);
     	thread.start();


     	image_above.setOnClickListener(new View.OnClickListener() {
           @Override
            public void onClick(View arg0) { 
        	   
        	   String status = Environment.getExternalStorageState();
               if (status.equals(Environment.MEDIA_MOUNTED)) {
                      File tempFile = new File(Environment.getExternalStorageDirectory() + "/temp.jpg");
                      Uri tempUri = Uri.fromFile(tempFile);
        	   
        	   Intent i = new Intent(
               Intent.ACTION_PICK,
               android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
               i.putExtra("crop", "true");
               i.putExtra("aspectX", 5);// 这兩項為裁剪框的比例.
               i.putExtra("aspectY", 3);// x:y=1:1
               i.putExtra(MediaStore.EXTRA_OUTPUT,tempUri);
               i.putExtra("outputFormat",Bitmap.CompressFormat.JPEG.toString());
        	   startActivityForResult(i, 2);
            
               }
        	   
        	   
           }
        });
	    
	    
     
        
        
        
	    
	    
		
	}
	
	  @Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// TODO Auto-generated method stub
		
		  getMenuInflater().inflate(R.menu.main, menu);
		  
		  return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		// TODO Auto-generated method stub
		  
		  switch (item.getItemId()){
		  case R.id.action_about:
			  defaultSetting();
			   break;
		  case R.id.action_close:
			  android.os.Process.killProcess(android.os.Process.myPid()); 
//			  finish();
		       break;
		  }
		return super.onOptionsItemSelected(item);
	}

	@Override
	public void onBackPressed() {
	}

	public void defaultSetting(){
		

		  AlertDialog.Builder builder = new AlertDialog.Builder(MainActivity.this);
		                      builder.setCancelable(false);
                            builder.setTitle("Baby Good Sticker");
                            builder.setMessage("reset photo ?");
                            builder.setPositiveButton("YES", new DialogInterface.OnClickListener() {
                                  	
                                  	@Override
                                  	public void onClick(DialogInterface dialog, int which) {
                              //default work start
                                  		image_above.setImageDrawable(getResources().getDrawable(R.drawable.def)); 
                                  		picturePath = null;
                                        SharedPreferences settt = getSharedPreferences("dino", 0);
                                        settt.edit()
                                             .putString("thumb",picturePath)
                                             .commit(); 
                              //default end    		
                                  	
                                  	}
                                  });
		                      builder.setNegativeButton("NO",new DialogInterface.OnClickListener() {
                                     	
                                     	@Override
                                     	public void onClick(DialogInterface dialog, int which) {
                                     		// TODO Auto-generated method stub
                                     								
                                     		dialog.cancel();
                                     	}
                                     });
		                     builder.show();
                                    
		
		
	}
	
	

	@Override
	    public void onPause() {
	      this.adView.pause();
	      super.onPause();
	    }

	    @Override
	    public void onResume() {
	      super.onResume();
	      this.adView.resume();
	    }

	    @Override
	    public void onDestroy() {
	      this.adView.destroy();
	      super.onDestroy();
	    }
	
   

@Override
protected void onActivityResult(int requestCode, int resultCode, Intent data) {
 	 super.onActivityResult(requestCode, resultCode, data);

 	 switch(requestCode){
      
 	
 	 
 	 
	  case 2:
                  		  
		  if (resultCode == RESULT_OK && null != data ) { 
			 Bitmap selectedImage = BitmapFactory.decodeFile(Environment
             .getExternalStorageDirectory() + "/temp.jpg");
		    Uri tempUri = getImageUri(getApplicationContext(), selectedImage);
			picturePath = getRealPathFromURI(tempUri);
			image_above.setImageBitmap(decodefile(picturePath));
            SharedPreferences settt = getSharedPreferences("dino", 0);
            settt.edit()
                 .putString("thumb",picturePath)
                 .commit(); 
	       
            return ;
		  }
	 }
	 
	 
	 
	 

 	
 }
	
	
	
//other methods


Runnable Runnable = new Runnable() {
    public void run() {
    	gridView = (GridView)findViewById(R.id.main_page_gridview);
	    gridView.setNumColumns(4);
	    gridView.setAdapter(adapter);
	    mp = MediaPlayer.create(getApplicationContext(), R.raw.welcome);
    	mp.start();
gridView.setOnItemClickListener(new OnItemClickListener(){
    @Override
    public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
    	  	
    	ImageView image1 = (ImageView) view.findViewById( R.id.image );
    	
        if (image[position] == R.drawable.white){
        	
        	View v = (View)gridView.getChildAt(position);
        	
        	mp = MediaPlayer.create(getApplicationContext(), R.raw.goodgood);
        	mp.start();
        	image[position] = R.drawable.def;
        	total=total+1;
//        	image1.setImageDrawable( getResources().getDrawable( image[position] ));
        	image1.setImageResource(R.drawable.def);
        	v.startAnimation(turn());
        	
        }else{ 
        	mp = MediaPlayer.create(getApplicationContext(), R.raw.gogogo);
        	mp.start();
        	image[position] = R.drawable.white; 
//        image1.setImageDrawable( getResources().getDrawable( image[position] ));
        	image1.setImageResource(R.drawable.white);
        	
        	
        	
        total = total-1;};
        
        
        
       
       if  (total < 10){
    	   if(total == 0){
    		   mp.setOnCompletionListener(new MediaPlayer.OnCompletionListener() 
            	{
            	    @Override
            	    public void onCompletion(MediaPlayer mp) 
            	    {
    	   mp = MediaPlayer.create(getApplicationContext(), R.raw.start);
       	   mp.start();
            	    }});
            	    
            	    }
    	   
    	   imgRight.setImageResource(R.drawable.floor1);
       }	           
       else if (total > 9 && total < 20) { 
        	imgRight.setImageResource(R.drawable.floor2);
        	if(total == 10)
        	{	
        		
        		mp.setOnCompletionListener(new MediaPlayer.OnCompletionListener() 
        	{
        	    @Override
        	    public void onCompletion(MediaPlayer mp) 
        	    {
        	         // Code to start the next audio in the sequence
        	    	mp = MediaPlayer.create(getApplicationContext(), R.raw.ten);
	            	mp.start();
        	    	
        	    	
        	    }});
    
        	}
        	if(total == 15)
        	{
        		mp.setOnCompletionListener(new MediaPlayer.OnCompletionListener() 
            	{
            	    @Override
            	    public void onCompletion(MediaPlayer mp) 
            	    {
            	         // Code to start the next audio in the sequence
            	    	mp = MediaPlayer.create(getApplicationContext(),R.raw.keep );
    	            	mp.start();
            	    	
            	    	
            	    }
            	});
        	
        	}
            }
        else if (total == 20){
        	
        	imgRight.setImageResource(R.drawable.floor3);
                	mp.setOnCompletionListener(new MediaPlayer.OnCompletionListener() 
	            	{
	            	    @Override
	            	    public void onCompletion(MediaPlayer mp) 
	            	    {
	            	mp = MediaPlayer.create(getApplicationContext(),R.raw.complete );
	            	mp.start();

	            	mp.setOnCompletionListener(new MediaPlayer.OnCompletionListener() 
	            	{
	            	    @Override
	            	    public void onCompletion(MediaPlayer mp) 
	            	    {
	            	         // Code to start the next audio in the sequence
	            	    	mp = MediaPlayer.create(getApplicationContext(),R.raw.gifts );
	    	            	mp.start();
	            	    	
	            	    	
	            	    }});}});
                	
            linearLayout = (LinearLayout)findViewById(R.id.activity_main);    	
                	
        	 myBitmap = captureScreen(linearLayout);
             try {
                 if(myBitmap!=null){
                     //save image to SD card
                     saveImage(myBitmap);
                 }
                 Toast.makeText(getApplicationContext(), "Screenshot Saved to Gellary ^^", Toast.LENGTH_LONG).show();
             } catch (IOException e) {
                 // TODO Auto-generated catch block
                 e.printStackTrace();
             }

               
        }
    
    
    SharedPreferences settings = getSharedPreferences("PREFdown", 0);
    settings.edit()
        .putString(String.valueOf(position),String.valueOf(image[position]))
        .commit();
    
    }   
            
});  }};



public Animation turn()
{  
	float toDegrees = new Random().nextFloat() * Integer.MAX_VALUE % 360;
    RotateAnimation anim = new RotateAnimation(0,toDegrees,Animation.RELATIVE_TO_SELF,0.5f,Animation.RELATIVE_TO_SELF,0.5f);
    ScaleAnimation scale = new ScaleAnimation(2f, 1f, 2f, 1f, Animation.RELATIVE_TO_SELF, 0.5f, Animation.RELATIVE_TO_SELF, 0.5f);
    AnimationSet animSet = new AnimationSet(true);
    animSet.setInterpolator(new LinearInterpolator());
    animSet.setDuration(1000);
    animSet.addAnimation(anim);
    animSet.addAnimation(scale);
    animSet.setFillEnabled(true);
    animSet.setFillAfter(true);
   
    return animSet;
}

public Bitmap decodefile(String picturePath){
	
	BitmapFactory.Options options = new BitmapFactory.Options(); 
	BitmapFactory.decodeFile(picturePath, options);
	final int height = options.outHeight;
	options.inJustDecodeBounds = true;
	options.inPurgeable = true;
    options.inInputShareable = true;
    if (height > 4000 )  {options.inSampleSize = 8;} 
    else if (height > 3000 ) {options.inSampleSize = 6;} 
    else if (height > 2000 ){options.inSampleSize = 4;}
    else if  (height > 1000){options.inSampleSize = 2;}
    else {options.inSampleSize = 1;}
	options.inJustDecodeBounds = false;
	final Bitmap bitmap =  BitmapFactory.decodeFile(picturePath, options);
	
    return bitmap;
}

public Uri getImageUri(Context inContext, Bitmap inImage) {
    ByteArrayOutputStream bytes = new ByteArrayOutputStream();
    inImage.compress(Bitmap.CompressFormat.JPEG, 100, bytes);
    String path = Images.Media.insertImage(inContext.getContentResolver(), inImage, "Title", null);
    return Uri.parse(path);
}

public String getRealPathFromURI(Uri uri) {
    Cursor cursor = getContentResolver().query(uri, null, null, null, null); 
    cursor.moveToFirst(); 
    int idx = cursor.getColumnIndex(MediaStore.Images.ImageColumns.DATA); 
    return cursor.getString(idx); 
}
	
	public static Bitmap captureScreen(View v) {
		 
	        Bitmap screenshot = null;
	        try {
	 
	            if(v!=null) {
	            	
	                screenshot = Bitmap.createBitmap(v.getMeasuredWidth(),v.getMeasuredHeight(), Config.ARGB_8888);
	                Canvas canvas = new Canvas(screenshot);
	                v.draw(canvas);
	            }
	        }catch (Exception e){
	            Log.d("ScreenShotActivity", "Failed to capture screenshot because:" + e.getMessage());
	        }
	        return screenshot;
	    }
	 
	    public  void saveImage(Bitmap bitmap) throws IOException{
	 
	        ByteArrayOutputStream bytes = new ByteArrayOutputStream();
	        bitmap.compress(Bitmap.CompressFormat.PNG, 40, bytes);
	        Time t=new Time();
	        
	        t.setToNow(); // 取得系統時間。 
	        
	        String year = String.valueOf(t.year);
	        String month = String.valueOf(t.month+1);
	        String date = String.valueOf(t.monthDay);
	        String hour = String.valueOf(t.hour);
	        String minute = String.valueOf(t.minute); 
	        String second = String.valueOf(t.second);
	        
	        File f = new File(Environment.getExternalStorageDirectory() + File.separator + year + month + date + hour + minute + second +".png");
	        f.createNewFile();
	        
	        MediaScannerConnection.scanFile(this, new String[] { f.toString() }, null, null);
	        FileOutputStream fo = new FileOutputStream(f);
	        fo.write(bytes.toByteArray());
 	        fo.close();
	    }
	    
	    
	    
	    
}

